---
alwaysApply: true
description: "Error handling and validation patterns"
---

# Error Handling & Validation

## Error Display Guidelines
- Implement error handling in views using `SelectableText.rich` instead of SnackBars
- Display errors in `SelectableText.rich` with red color for visibility
- Handle empty states within the displaying screen
- Always include an `errorBuilder` when using `Image.network`

## State Management
- Manage error handling and loading states within Cubit states
- Use Freezed unions for comprehensive state representation:
  ```dart
  @freezed
  class ExampleState with _$ExampleState {
    const factory ExampleState.initial() = _Initial;
    const factory ExampleState.loading() = _Loading;
    const factory ExampleState.success(List<Item> items) = _Success;
    const factory ExampleState.error(String message) = _Error;
  }
  ```

## Error Recovery
- Implement proper error recovery mechanisms
- Provide user-friendly error messages
- Use try-catch blocks appropriately in data layer
- Handle network errors gracefully with retry mechanisms

## Firebase Exception Handling
- Handle Firebase exceptions with detailed error messages and appropriate logging
- Implement specific error handling for different Firebase services
- Use Firebase crashlytics for error tracking
