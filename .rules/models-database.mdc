---
alwaysApply: false
---
# Models & Database

## Model Conventions
- Use `@JsonSerializable(fieldRename: FieldRename.snake)` for models
- Implement `@JsonKey(includeFromJson: true, includeToJson: false)` for read-only fields
- Use Freezed for immutable model classes
- Use `@JsonValue(int)` for enums that go to the database

## Database Schema
- Include `createdAt`, `updatedAt`, and `isDeleted` fields in Firestore documents
- Use consistent field naming conventions (snake_case for JSON)
- Implement proper data normalization

## Code Generation
- Utilize build_runner for generating code from annotations (Freezed, JSON serialization)
- Run `flutter pub run build_runner build --delete-conflicting-outputs` after modifying annotated classes
- Keep generated files in version control when appropriate

## Model Example
```dart
@freezed
class User with _$User {
  const factory User({
    required String id,
    required String email,
    required String displayName,
    @JsonKey(name: 'created_at') required DateTime createdAt,
    @JsonKey(name: 'updated_at') required DateTime updatedAt,
    @JsonKey(name: 'is_deleted') @Default(false) bool isDeleted,
  }) = _User;

  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);
}
```

## Repository Pattern
- Implement repository pattern for data access
- Use abstract classes for repository interfaces
- Implement concrete repositories in data layer
- Use dependency injection for repository instances
