---
alwaysApply: true
description: "Debugging, code generation, and documentation guidelines"
---

# Miscellaneous

## Debugging
- Use `log` instead of `print` for debugging
- Use BlocObserver for monitoring state transitions during debugging
- Implement proper logging levels (debug, info, warning, error)
- Use Flutter Inspector for widget debugging

## Code Generation
- Utilize build_runner for generating code from annotations (Freezed, JSON serialization)
- Run `flutter pub run build_runner build --delete-conflicting-outputs` after modifying annotated classes
- Keep generated files in version control when appropriate

## Code Style
- Keep lines no longer than 80 characters, adding commas before closing brackets for multi-parameter functions
- Use trailing commas for better formatting and diffs
- Use proper indentation and formatting
- Follow official Dart style guide

## Documentation
- Document complex logic and non-obvious code decisions
- Follow official Flutter, Bloc, and Firebase documentation for best practices
- Use proper code comments for complex algorithms
- Implement proper API documentation

## Testing
- Implement proper unit tests for business logic
- Use widget tests for UI components
- Implement integration tests for critical user flows
- Use proper test structure and naming conventions

## Version Control
- Use meaningful commit messages
- Implement proper branching strategy
- Use proper pull request templates
- Keep generated files in version control when appropriate
