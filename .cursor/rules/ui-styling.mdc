---
alwaysApply: true
description: "UI components and styling guidelines"
---

# UI & Styling

## Widget Guidelines
- Use Flutter's built-in widgets and create custom widgets when needed
- Implement responsive design using LayoutBuilder or MediaQuery
- Use themes for consistent styling across the app
- Use `Theme.of(context).textTheme.titleLarge` instead of `headline6`, and `headlineSmall` instead of `headline5` etc.

## Component Structure
- Create small, private widget classes instead of methods like `Widget _build...`
- Structure components: exported widget, subwidgets, helpers, static content, types
- Use composition over inheritance for widget design

## Interactive Elements
- In TextFields, set appropriate `textCapitalization`, `keyboardType`, and `textInputAction`
- Implement `RefreshIndicator` for pull-to-refresh functionality
- Use proper button states and feedback

## Theming
- Implement consistent theming across the app
- Use Material Design principles
- Create custom themes for specific components when needed
- Use proper color schemes and typography

## Asset Management
- Use AssetImage for static images
- Use cached_network_image for remote images
- Always include an `errorBuilder` when using `Image.network`
- Implement proper image optimization

## Accessibility
- Implement proper accessibility features
- Use semantic labels and descriptions
- Ensure proper color contrast
- Support screen readers and other assistive technologies
