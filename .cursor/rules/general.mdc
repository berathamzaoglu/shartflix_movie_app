---
alwaysApply: true
description: "General Flutter development principles and conventions"
---

# Flutter Development - General Principles

## Key Principles
- Write concise, technical Dart code with accurate examples
- Use functional and declarative programming patterns where appropriate
- Prefer composition over inheritance
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure files: exported widget, subwidgets, helpers, static content, types

## Key Conventions
1. Use GoRouter for navigation with redirects for auth and onboarding flows
2. Use get_it as the dependency injection solution for all layers
3. Optimize for Flutter performance metrics (first meaningful paint, time to interactive)
4. Prefer stateless widgets:
   - Use BlocBuilder for widgets that depend on Cubit/Bloc state
   - Use BlocListener for handling side effects, such as navigation or showing dialogs

## Documentation
- Document complex logic and non-obvious code decisions
- Follow official Flutter, Bloc, and Firebase documentation for best practices
- Refer to Flutter, Bloc, and Firebase documentation for Widgets, State Management, and Backend Integration best practices
