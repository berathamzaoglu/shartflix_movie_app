---
alwaysApply: true
description: "Performance optimization guidelines"
---

# Performance Optimization

## Widget Performance
- Use const widgets where possible to optimize rebuilds
- Implement list view optimizations (e.g., ListView.builder)
- Use AssetImage for static images and cached_network_image for remote images
- Prefer StatelessWidget over StatefulWidget when possible

## State Management Performance
- Optimize BLoC/Cubit state emissions
- Use proper state comparison to prevent unnecessary rebuilds
- Implement proper widget tree structure to minimize rebuilds

## Memory Management
- Dispose of resources properly in StatefulWidgets
- Use proper lifecycle management for BLoC/Cubit
- Implement proper stream and subscription disposal

## Firebase Performance
- Optimize Firebase queries by using indexes and limiting query results
- Use Firebase Performance Monitoring to track app performance
- Implement proper caching strategies for Firestore data

## Build Performance
- Optimize build times by using proper dependency management
- Use code generation efficiently with build_runner
- Implement proper asset optimization

## Metrics
- Optimize for Flutter performance metrics (first meaningful paint, time to interactive)
- Use Flutter Inspector for performance debugging
- Implement proper performance monitoring and tracking
